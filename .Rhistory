aes(x=long, y=lat, group=group, map_id=region),
fill=map.world_joined$Rank, colour="#7f7f7f", size=0.5)
p
p <- ggplot()
p <- p + geom_map(data=map.world_joined, map=map.world_joined,
aes(x=long, y=lat, group=group, map_id=region),
fill=map.world_joined$Rank, colour="#7f7f7f", size=map.world_joined$Rank)
p
p <- ggplot()
p <- p + geom_map(data=map.world_joined, map=map.world_joined,
aes(x=long, y=lat, group=group, map_id=region),
fill=map.world_joined$Rank, colour="#7f7f7f", size=(map.world_joined$Rank)/100)
P
p
map.world <- map_data("world")
paper_df <- read.csv("D:/Temp/scimagojr.csv")
paper_df$country <- recode(paper_df$country
,'United States' = 'USA'
,'United Kingdom' = 'UK')
library(tidyverse)
library(rvest)
library(magrittr)
library(ggmap)
library(stringr)
library(tidyverse)
library(readxl)
library(gstat)
library(sp)
library(rgdal)
library(raster)
library(leaflet)
library(mapview)
library(sf)
library(tmap)
library("lattice")
library(tidyverse)
library(rvest)
library(magrittr)
library(ggmap)
library(stringr)
map.world <- map_data("world")
paper_df <- read.csv("D:/Temp/scimagojr.csv")
paper_df$country <- recode(paper_df$country
,'United States' = 'USA'
,'United Kingdom' = 'UK')
library(dplyr)
map.world <- map_data("world")
paper_df <- read.csv("D:/Temp/scimagojr.csv")
paper_df$country <- recode(paper_df$country
,'United States' = 'USA'
,'United Kingdom' = 'UK')
library(tidyverse)
library(rvest)
library(magrittr)
library(ggmap)
library(stringr)
library(tidyverse)
library(readxl)
library(gstat)
library(sp)
library(rgdal)
library(raster)
library(leaflet)
library(mapview)
library(sf)
library(tmap)
library("lattice")
library(tidyverse)
library(rvest)
library(magrittr)
library(ggmap)
library(dplyr)
library(dplyr)
map.world <- map_data("world")
paper_df <- read.csv("D:/Temp/scimagojr.csv")
paper_df$country <- recode(paper_df$country
,'United States' = 'USA'
,'United Kingdom' = 'UK')
paper_df$country <- recode(paper_df$country
,'United States' = 'USA'
,'United Kingdom' = 'UK', 'NA'=0)
map.world_joined <- left_join(map.world, paper_df, by = c('region' = 'Country'))
ggplot() +
geom_polygon(data = map.world_joined, aes(x = long, y = lat, group = group)) +
labs(title = 'Countries with highest "talent competitiveness"'
,subtitle = "source: INSEAD, https://www.insead.edu/news/2017-global-talent-competitiveness-index-davos") +
theme(text = element_text(family = "Gill Sans", color = "#FFFFFF")
,panel.background = element_rect(fill = "#444444")
,plot.background = element_rect(fill = "#444444")
,panel.grid = element_blank()
,plot.title = element_text(size = 30)
,plot.subtitle = element_text(size = 10)
,axis.text = element_blank()
,axis.title = element_blank()
,axis.ticks = element_blank()
,legend.position = "none"
)
p <- ggplot()
p <- p + geom_map(data=map.world_joined, map=map.world_joined,
aes(x=long, y=lat, group=group, map_id=region),
fill=map.world_joined$Rank, colour="#7f7f7f", size=(map.world_joined$Rank)/100)
p
p <- p + geom_map(data=map.world_joined, map=map.world_joined,
aes(x=long, y=lat, group=group, map_id=region),
fill=map.world_joined$Rank, colour="#7f7f7f", size=(map.world_joined$Citations.per.document)/100)
p
p <- ggplot()
p <- p + geom_map(data=map.world_joined, map=map.world_joined,
aes(x=long, y=lat, group=group, map_id=region),
fill=map.world_joined$Rank, colour="#7f7f7f", size=(map.world_joined$Citations.per.document)/100)
p
p <- p + geom_map(data=map.world_joined, map=map.world_joined,
aes(x=long, y=lat, group=group, map_id=region),
fill="White", colour="#7f7f7f", size=(map.world_joined$Citations.per.document)/100)
p
p <- p + geom_map(data=map.world_joined, map=map.world_joined,
aes(x=long, y=lat, group=group, map_id=region),
fill=map.world_joined$Citations.per.document, colour="#7f7f7f", size=(map.world_joined$Citations.per.document)/100)
p
p <- ggplot()
p <- p + geom_map(data=map.world_joined, map=map.world_joined,
aes(x=long, y=lat, group=group, map_id=region),
fill=map.world_joined$Citations.per.document, colour="#7f7f7f", size=(map.world_joined$Citations.per.document)/100)
p
p <- ggplot()
p <- p + geom_map(data=map.world_joined, map=map.world_joined,
aes(x=long, y=lat, group=group, map_id=region),
fill="White", colour="#7f7f7f", size=(map.world_joined$Citations.per.document)/100)
p
p <- ggplot()
p <- p + geom_map(data=map.world_joined, map=map.world_joined,
aes(x=long, y=lat, group=group, map_id=region),
fill="White", colour=map.world_joined$Citations.per.document, size=(map.world_joined$Citations.per.document)/100)
p
()
p <- ggplot()
p <- p + geom_map(data=map.world_joined, map=map.world_joined,
aes(x=long, y=lat, group=group, map_id=region),
fill=map.world_joined$Citations.per.document, colour=map.world_joined$Citations.per.document, size=(map.world_joined$Citations.per.document)/100)
p
p <- ggplot()
p <- p + geom_map(data=map.world_joined, map=map.world_joined,
aes(x=long, y=lat, group=group, map_id=region),
fill=map.world_joined$Citations.per.document, colour=map.world_joined$Citations.per.document, size=(map.world_joined$Citations.per.document))
p
p <- ggplot()
p <- p + geom_map(data=map.world_joined, map=map.world_joined,
aes(x=long, y=lat, group=group, map_id=region),
fill=map.world_joined$Citations.per.document, colour=map.world_joined$Citations.per.document, size=(map.world_joined$Citations.per.document)/10)
p
p <- ggplot()
p <- p + geom_map(data=map.world_joined, map=map.world_joined,
aes(x=long, y=lat, group=group, map_id=region),
fill=map.world_joined$region, colour=map.world_joined$region, size=(map.world_joined$Citations.per.document)/10)
p
p <- ggplot()
p <- p + geom_map(data=map.world_joined, map=map.world_joined,
aes(x=long, y=lat, group=group, map_id=region),
fill=map.world_joined$Rank, colour=map.world_joined$Rank, size=(map.world_joined$Citations.per.document)/10)
p
p <- ggplot()
p <- p + geom_map(data=map.world_joined, map=map.world_joined,
aes(x=long, y=lat, group=group, map_id=region),
fill=map.world_joined$Rank, colour=map.world_joined$Rank, size=(map.world_joined$Citations.per.document)/5)
p
p <- ggplot()
p <- p + geom_map(data=map.world_joined, map=map.world_joined,
aes(x=long, y=lat, group=group, map_id=region),
fill=map.world_joined$Rank, colour=map.world_joined$Rank, size=(map.world_joined$Citations.per.document)/50)
p
install.packages("raster")
install.packages("spData")
install.packages("spDataLarge", repos = "https://nowosad.github.io/drat/",
type = "source")
library(sf)          # classes and functions for vector data
library(raster)      # classes and functions for raster data
library(spData)        # load geographic data
library(spDataLarge)   # load larger geographic data
names(world)
plot(world)
summary(world["lifeExp"])
summary(world["lifeExp"])
world[1:2, 1:3]
library(sp)
world_sp = as(world, Class = "Spatial")
world_sf = st_as_sf(world_sp, "sf")
plot(world[3:4])
plot(world["pop"])
asia = world[world$continent == "Asia", ]
asia = st_union(asia)
plot(world["pop"], reset = FALSE)
plot(asia, add = TRUE, col = "red")
plot(world["continent"], reset = FALSE)
cex = sqrt(world$pop) / 10000
plot(st_geometry(world_centroids), add = TRUE, cex = cex)
plot(st_geometry(world_centroids), add = TRUE, cex = cex)
POINT (5 2)
point (5 2)
"Python" > "R"
"Python" < "R"
2+3-5*6+3
2+3-5*6+3/3+2-4*8
3+3/3*2
install.packages("reshape2")
library(readr)
####..... Input data ....#####
nuclide = "Eu-152" # nucliede "symbol-massnumber-m/D(If needed)"
threshhold_intensity = 0.9   # Minimum intensity in pwersent % (0.90%)
bin.size <- 0.0001  # Bin size of spectra   0.0001= 100 eV
# Generate file name
lara_data_file = sprintf("%s.lara.txt", nuclide)
output_file =  sprintf("%s_spectr.txt", nuclide)
# download lara data file
url_lara = sprintf("http://www.nucleide.org/DDEP_WG/Nuclides/%s", lara_data_file)
download.file(url_lara , lara_data_file)
# Read text file
data_lara <- read_delim(lara_data_file,
";", escape_double = FALSE, trim_ws = TRUE,
skip = 26)
setwd("D:/GITHUB/laradata_read")
library(readr)
####..... Input data ....#####
nuclide = "Eu-152" # nucliede "symbol-massnumber-m/D(If needed)"
threshhold_intensity = 0.9   # Minimum intensity in pwersent % (0.90%)
bin.size <- 0.0001  # Bin size of spectra   0.0001= 100 eV
# Generate file name
lara_data_file = sprintf("%s.lara.txt", nuclide)
output_file =  sprintf("%s_spectr.txt", nuclide)
# download lara data file
url_lara = sprintf("http://www.nucleide.org/DDEP_WG/Nuclides/%s", lara_data_file)
download.file(url_lara , lara_data_file)
# Read text file
data_lara <- read_delim(lara_data_file,
";", escape_double = FALSE, trim_ws = TRUE,
skip = 26)
# Convert Energy from character to numeric
data_lara$`Energy (keV)` <-  as.numeric(data_lara$`Energy (keV)`)
View(data_lara)
# Read text file
data_lara <- read_delim(lara_data_file,
";", escape_double = FALSE, trim_ws = TRUE,
skip = 25)
# Read text file
data_lara <- read_delim(lara_data_file,
";", escape_double = FALSE, trim_ws = TRUE,
skip = 25)
# Read text file
data_lara <- read_delim(lara_data_file,
";", escape_double = FALSE, trim_ws = TRUE,
skip = 24)
# Convert Energy from character to numeric
data_lara$`Energy (keV)` <-  as.numeric(data_lara$`Energy (keV)`)
View(data_lara)
#Remove last line with NA values
data_lara = data_lara[-nrow(data_lara), ]
# Make a subset for a threshhold intensity (eg. > 0.9 )
data_sub = subset(data_lara, data_lara$`Intensity (%)`>threshhold_intensity)
# Change the column name of requried data
colnames(data_sub)[c(1,3,5)] <- c('Energy_ev','Intensity_frac', 'Type')
# Remove alfa lines
data_sub = subset(data_sub, data_sub$Type !='a')
# Create and open an text file to write the spectra
file.create(output_file)
fileConn1 <- file(output_file, "w")
#Write the spectra in text file .... two lines for a bin..... intensity is -1 for last line
for(i in 1:nrow(data_sub)){
write(sprintf('myfile.write ("SPECTR   \ %fe6\   \ %f\\n")', (data_sub$Energy_ev[i]*0.001), (data_sub$Intensity_frac[i]/100)), fileConn1, append=TRUE)
if(i != nrow(data_sub)){
write(sprintf('myfile.write ("SPECTR   \ %fe6\   \ %f\\n")', ((data_sub$Energy_ev[i]*0.001)+bin.size), (0)), fileConn1, append=TRUE)
}else{
write(sprintf('myfile.write ("SPECTR   \ %fe6\   \ %f\\n")', ((data_sub$Energy_ev[i]*0.001)+bin.size), (-1)), fileConn1, append=TRUE)
}
}
close(fileConn1)
file.show("sample1.txt")
file.show(fileConn1)
file.show(output_file)
####..... Input data ....#####
nuclide = "Eu-154" # nucliede "symbol-massnumber-m/D(If needed)"
threshhold_intensity = 0.9   # Minimum intensity in pwersent % (0.90%)
bin.size <- 0.0001  # Bin size of spectra   0.0001= 100 eV
# Generate file name
lara_data_file = sprintf("%s.lara.txt", nuclide)
output_file =  sprintf("%s_spectr.txt", nuclide)
# download lara data file
url_lara = sprintf("http://www.nucleide.org/DDEP_WG/Nuclides/%s", lara_data_file)
download.file(url_lara , lara_data_file)
# Read text file
data_lara <- read_delim(lara_data_file,
";", escape_double = FALSE, trim_ws = TRUE,
skip = 24)
# Convert Energy from character to numeric
data_lara$`Energy (keV)` <-  as.numeric(data_lara$`Energy (keV)`)
#Remove last line with NA values
data_lara = data_lara[-nrow(data_lara), ]
# Make a subset for a threshhold intensity (eg. > 0.9 )
data_sub = subset(data_lara, data_lara$`Intensity (%)`>threshhold_intensity)
# Change the column name of requried data
colnames(data_sub)[c(1,3,5)] <- c('Energy_ev','Intensity_frac', 'Type')
# Remove alfa lines
data_sub = subset(data_sub, data_sub$Type !='a')
# Create and open an text file to write the spectra
file.create(output_file)
fileConn1 <- file(output_file, "w")
#Write the spectra in text file .... two lines for a bin..... intensity is -1 for last line
for(i in 1:nrow(data_sub)){
write(sprintf('myfile.write ("SPECTR   \ %fe6\   \ %f\\n")', (data_sub$Energy_ev[i]*0.001), (data_sub$Intensity_frac[i]/100)), fileConn1, append=TRUE)
if(i != nrow(data_sub)){
write(sprintf('myfile.write ("SPECTR   \ %fe6\   \ %f\\n")', ((data_sub$Energy_ev[i]*0.001)+bin.size), (0)), fileConn1, append=TRUE)
}else{
write(sprintf('myfile.write ("SPECTR   \ %fe6\   \ %f\\n")', ((data_sub$Energy_ev[i]*0.001)+bin.size), (-1)), fileConn1, append=TRUE)
}
}
close(fileConn1)
file.show(output_file)
# Read text file
data_lara <- read_delim(lara_data_file,
";", escape_double = FALSE, trim_ws = TRUE,
skip = 24)
# Convert Energy from character to numeric
data_lara$`Energy (keV)` <-  as.numeric(data_lara$`Energy (keV)`)
View(data_lara)
#Remove last line with NA values
data_lara = data_lara[-nrow(data_lara), ]
View(data_lara)
all_content = readLines(lara_data_file)
all_content
skip = all_content[-c(1:grep("--------",all_content))]
input <- read.table(textConnection(skip))
?read_delim
input <- read.table(textConnection(skip), ";", escape_double = FALSE, trim_ws = TRUE)
input <- read.table(textConnection(skip), ";")
skip = all_content[-c(1:grep("Lvl. end",all_content))]
input <- read.table(textConnection(skip), ";")
input <- read.table(textConnection(skip))
?read.table
skip = all_content[-c(1:grep("--------",all_content))]
input <- read.table(textConnection(skip), header = TRUE, sep = ";")
?fread
all_content = readLines(lara_data_file)
all_content
skip = all_content[-c(1:grep("--------",all_content))]
skip
cls
clr
skip
input <- read.table(textConnection(skip), header = TRUE, sep = ";")
input <- read.table(textConnection(skip), header = TRUE, sep = ";", skip =-1)
skip[-1]
skip[-1]
skip = all_content[-c(1:grep("--------",all_content))]
skip
skip[-1]
skip[-nrow(skip)]
nrow(skip)
skip = all_content[-c(1:grep("--------","============",all_content))]
all_content[1]
all_content[-length(all_content)]
input <- read.table(textConnection(skip[-length(skip)]), header = TRUE, sep = ";", skip =-1)
View(input)
input <- read.table(textConnection(skip[-length(skip)]), header = TRUE, sep = ";")
all_content = readLines(lara_data_file)
all_content[-length(all_content)]
skip = all_content[-c(1:grep("--------",all_content))]
input <- read.table(textConnection(skip[-length(skip)]), header = TRUE, sep = ";")
input
all_content = readLines(url_lara)
all_content[-length(all_content)]
library(utils)
library(readr)
library(utils)
####..... Input data ....#####
nuclide = "Eu-154" # nucliede "symbol-massnumber-m/D(If needed)"
threshhold_intensity = 0.9   # Minimum intensity in pwersent % (0.90%)
bin.size <- 0.0001  # Bin size of spectra   0.0001= 100 eV
# # download lara data file
url_lara = sprintf("http://www.nucleide.org/DDEP_WG/Nuclides/%s", lara_data_file)
all_content = readLines(url_lara)
Head_skip = all_content[-c(1:grep("--------",all_content))]
data_lara <- read.table(textConnection(Head_skip[-length(Head_skip)]), header = TRUE, sep = ";")
# Make a subset for a threshhold intensity (eg. > 0.9 )
data_sub = subset(data_lara, data_lara$`Intensity (%)`>threshhold_intensity)
# Change the column name of requried data
colnames(data_sub)[c(1,3,5)] <- c('Energy_ev','Intensity_frac', 'Type')
# Remove alfa lines
data_sub = subset(data_sub, data_sub$Type !='a')
# Create and open an text file to write the spectra
file.create(output_file)
fileConn1 <- file(output_file, "w")
#Write the spectra in text file .... two lines for a bin..... intensity is -1 for last line
for(i in 1:nrow(data_sub)){
write(sprintf('myfile.write ("SPECTR   \ %fe6\   \ %f\\n")', (data_sub$Energy_ev[i]*0.001), (data_sub$Intensity_frac[i]/100)), fileConn1, append=TRUE)
if(i != nrow(data_sub)){
write(sprintf('myfile.write ("SPECTR   \ %fe6\   \ %f\\n")', ((data_sub$Energy_ev[i]*0.001)+bin.size), (0)), fileConn1, append=TRUE)
}else{
write(sprintf('myfile.write ("SPECTR   \ %fe6\   \ %f\\n")', ((data_sub$Energy_ev[i]*0.001)+bin.size), (-1)), fileConn1, append=TRUE)
}
}
close(fileConn1)
file.show(output_file)
file.show(output_file)
library(readr)
library(utils)
####..... Input data ....#####
nuclide = "Eu-154" # nucliede "symbol-massnumber-m/D(If needed)"
threshhold_intensity = 0.9   # Minimum intensity in pwersent % (0.90%)
bin.size <- 0.0001  # Bin size of spectra   0.0001= 100 eV
# Generate file name
lara_data_file = sprintf("%s.lara.txt", nuclide)
output_file =  sprintf("%s_spectr1.txt", nuclide)
# # download lara data file
url_lara = sprintf("http://www.nucleide.org/DDEP_WG/Nuclides/%s", lara_data_file)
all_content = readLines(url_lara)
Head_skip = all_content[-c(1:grep("--------",all_content))]
data_lara <- read.table(textConnection(Head_skip[-length(Head_skip)]), header = TRUE, sep = ";")
# Make a subset for a threshhold intensity (eg. > 0.9 )
data_sub = subset(data_lara, data_lara$`Intensity (%)`>threshhold_intensity)
# Change the column name of requried data
colnames(data_sub)[c(1,3,5)] <- c('Energy_ev','Intensity_frac', 'Type')
# Remove alfa lines
data_sub = subset(data_sub, data_sub$Type !='a')
# Create and open an text file to write the spectra
file.create(output_file)
fileConn1 <- file(output_file, "w")
#Write the spectra in text file .... two lines for a bin..... intensity is -1 for last line
for(i in 1:nrow(data_sub)){
write(sprintf('myfile.write ("SPECTR   \ %fe6\   \ %f\\n")', (data_sub$Energy_ev[i]*0.001), (data_sub$Intensity_frac[i]/100)), fileConn1, append=TRUE)
if(i != nrow(data_sub)){
write(sprintf('myfile.write ("SPECTR   \ %fe6\   \ %f\\n")', ((data_sub$Energy_ev[i]*0.001)+bin.size), (0)), fileConn1, append=TRUE)
}else{
write(sprintf('myfile.write ("SPECTR   \ %fe6\   \ %f\\n")', ((data_sub$Energy_ev[i]*0.001)+bin.size), (-1)), fileConn1, append=TRUE)
}
}
close(fileConn1)
file.show(output_file)
View(data_sub)
View(data_sub)
View(data_lara)
# Make a subset for a threshhold intensity (eg. > 0.9 )
data_sub = subset(data_lara, data_lara$Intensity.... > threshhold_intensity)
# Make a subset for a threshhold intensity (eg. > 0.9 )
data_sub = subset(data_lara, data_lara[3, ] > threshhold_intensity)
# Make a subset for a threshhold intensity (eg. > 0.9 )
data_sub = subset(data_lara, data_lara$Intensity.... > threshhold_intensity)
# Change the column name of requried data
colnames(data_sub)[c(1,3,5)] <- c('Energy_ev','Intensity_frac', 'Type')
# Remove alfa lines
data_sub = subset(data_sub, data_sub$Type !='a')
# Create and open an text file to write the spectra
file.create(output_file)
fileConn1 <- file(output_file, "w")
#Write the spectra in text file .... two lines for a bin..... intensity is -1 for last line
for(i in 1:nrow(data_sub)){
write(sprintf('myfile.write ("SPECTR   \ %fe6\   \ %f\\n")', (data_sub$Energy_ev[i]*0.001), (data_sub$Intensity_frac[i]/100)), fileConn1, append=TRUE)
if(i != nrow(data_sub)){
write(sprintf('myfile.write ("SPECTR   \ %fe6\   \ %f\\n")', ((data_sub$Energy_ev[i]*0.001)+bin.size), (0)), fileConn1, append=TRUE)
}else{
write(sprintf('myfile.write ("SPECTR   \ %fe6\   \ %f\\n")', ((data_sub$Energy_ev[i]*0.001)+bin.size), (-1)), fileConn1, append=TRUE)
}
}
close(fileConn1)
file.show(output_file)
library(readr)
library(utils)
####..... Input data ....#####
nuclide = "Eu-154" # nucliede "symbol-massnumber-m/D(If needed)"
threshhold_intensity = 0.9   # Minimum intensity in pwersent % (0.90%)
bin.size <- 0.0001  # Bin size of spectra   0.0001= 100 eV
# Generate file name
lara_data_file = sprintf("%s.lara.txt", nuclide)
output_file =  sprintf("%s_spectr.txt", nuclide)
# # download lara data file
url_lara = sprintf("http://www.nucleide.org/DDEP_WG/Nuclides/%s", lara_data_file)
download.file(url_lara , lara_data_file)
# Read text file
data_lara <- read_delim(lara_data_file,
";", escape_double = FALSE, trim_ws = TRUE,
skip = 24)
# Convert Energy from character to numeric
data_lara$`Energy (keV)` <-  as.numeric(data_lara$`Energy (keV)`)
#Remove last line with NA values
data_lara = data_lara[-nrow(data_lara), ]
# Make a subset for a threshhold intensity (eg. > 0.9 )
data_sub = subset(data_lara, data_lara$Intensity.... > threshhold_intensity)
data_sub = subset(data_lara, data_lara$`Intensity (%)` > threshhold_intensity)
# Change the column name of requried data
colnames(data_sub)[c(1,3,5)] <- c('Energy_ev','Intensity_frac', 'Type')
# Remove alfa lines
data_sub = subset(data_sub, data_sub$Type !='a')
# Create and open an text file to write the spectra
file.create(output_file)
fileConn1 <- file(output_file, "w")
# Create and open an text file to write the spectra
file.create(output_file)
# Create and open an text file to write the spectra
file.create(output_file)
fileConn1 <- file(output_file, "w")
#Write the spectra in text file .... two lines for a bin..... intensity is -1 for last line
for(i in 1:nrow(data_sub)){
write(sprintf('myfile.write ("SPECTR   \ %fe6\   \ %f\\n")', (data_sub$Energy_ev[i]*0.001), (data_sub$Intensity_frac[i]/100)), fileConn1, append=TRUE)
if(i != nrow(data_sub)){
write(sprintf('myfile.write ("SPECTR   \ %fe6\   \ %f\\n")', ((data_sub$Energy_ev[i]*0.001)+bin.size), (0)), fileConn1, append=TRUE)
}else{
write(sprintf('myfile.write ("SPECTR   \ %fe6\   \ %f\\n")', ((data_sub$Energy_ev[i]*0.001)+bin.size), (-1)), fileConn1, append=TRUE)
}
}
close(fileConn1)
file.show(output_file)
output_file =  sprintf("%s_spectr1.txt", nuclide)
file.show(output_file)
source('D:/GITHUB/laradata_read/laradata_nodownload.r', echo=TRUE)
source('D:/GITHUB/laradata_read/laradata_nodownload.r', echo=TRUE)
